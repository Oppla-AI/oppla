name: Oppla Build MacOS

on:
  push:
    branches:
      - main
      - "v[0-9]+.[0-9]+.x"
    tags:
      - "v*"
  pull_request:
    branches:
      - "**"

concurrency:
  # Allow only one workflow per any non-`main` branch.
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.ref_name == 'main' && github.sha || 'anysha' }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1
  DIGITALOCEAN_SPACES_ACCESS_KEY: ${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }}
  DIGITALOCEAN_SPACES_SECRET_KEY: ${{ secrets.DIGITALOCEAN_SPACES_SECRET_KEY }}
  ZED_CLIENT_CHECKSUM_SEED: ${{ secrets.ZED_CLIENT_CHECKSUM_SEED }}

jobs:
  macos_bundle:
    timeout-minutes: 120
    name: Oppla MacOS Build and Bundle
    runs-on: [self-hosted, macOS, ARM64]  # Your local Mac with Xcode 26
    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      contains(github.event.pull_request.labels.*.name, 'run-bundling') ||
      github.event_name == 'push'
    env:
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      APPLE_NOTARIZATION_KEY: ${{ secrets.APPLE_NOTARIZATION_KEY }}
      APPLE_NOTARIZATION_KEY_ID: ${{ secrets.APPLE_NOTARIZATION_KEY_ID }}
      APPLE_NOTARIZATION_ISSUER_ID: ${{ secrets.APPLE_NOTARIZATION_ISSUER_ID }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 25
          clean: false
          ref: ${{ github.ref }}

      - name: Check Xcode version
        run: |
          echo "Current Xcode version:"
          xcodebuild -version
          echo "Xcode path:"
          xcode-select -p

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Configure CI
        run: |
          # Add Homebrew to PATH for cmake and other tools
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
          mkdir -p ./../.cargo
          cp ./.cargo/ci-config.toml ./../.cargo/config.toml || echo "No CI config found"

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Determine version and release channel
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          if [[ "$VERSION" == *"-pre" ]]; then
            echo "RELEASE_CHANNEL=preview" >> $GITHUB_ENV
          else
            echo "RELEASE_CHANNEL=stable" >> $GITHUB_ENV
          fi

      - name: Install cargo-about
        run: cargo install cargo-about@^0.7

      - name: Generate licenses
        run: script/generate-licenses

      - name: Create macOS app bundle
        run: |
          if [ -f "script/bundle-mac" ]; then
            # Run with -l flag for local build to skip dSYM uploads if no DigitalOcean credentials
            if [[ -z "$DIGITALOCEAN_SPACES_ACCESS_KEY" || -z "$DIGITALOCEAN_SPACES_SECRET_KEY" ]]; then
              echo "No DigitalOcean credentials found, running local build"
              script/bundle-mac -l
            else
              script/bundle-mac
            fi
          else
            echo "Bundle script not found, running basic build"
            cargo build --release
          fi

      - name: Create DMG (if no bundle script)
        if: ${{ !contains(github.event.repository.name, 'zed') }}
        run: |
          # Basic DMG creation if bundle-mac script doesn't exist
          mkdir -p target/release
          # Add your DMG creation commands here if needed

      - name: Upload macOS Bundle
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Oppla-macOS-${{ github.sha }}
          path: |
            target/*/release/*.dmg
            target/release/oppla
            target/release/zed
          retention-days: 7

      - name: Rename DMG files with architecture
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Looking for DMG files..."
          find target -name "*.dmg" -type f || echo "No DMG files found"
          
          # Rename DMG files to include architecture
          if [ -f "target/x86_64-apple-darwin/release/Oppla.dmg" ]; then
            mv "target/x86_64-apple-darwin/release/Oppla.dmg" "target/x86_64-apple-darwin/release/Oppla-x86_64.dmg"
            echo "Renamed x86_64 DMG to Oppla-x86_64.dmg"
          fi
          if [ -f "target/aarch64-apple-darwin/release/Oppla.dmg" ]; then
            mv "target/aarch64-apple-darwin/release/Oppla.dmg" "target/aarch64-apple-darwin/release/Oppla-aarch64.dmg"
            echo "Renamed aarch64 DMG to Oppla-aarch64.dmg"
          fi
          
          echo "DMG files after renaming:"
          find target -name "*.dmg" -type f || echo "No DMG files found"
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          draft: true
          prerelease: ${{ env.RELEASE_CHANNEL == 'preview' }}
          files: |
            target/x86_64-apple-darwin/release/Oppla-x86_64.dmg
            target/aarch64-apple-darwin/release/Oppla-aarch64.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - name: Clean CI config
        if: always()
        run: rm -rf ./../.cargo